// server.js
const express = require('express');
const mysql = require('mysql2');
const dotenv = require('dotenv');
const cors = require('cors');
const bcrypt = require('bcrypt');

// Load environment variables
dotenv.config();

const app = express();
app.use(express.json());

// CORS configuration
const corsOptions = {
  origin: 'http://localhost:5173', // Allow requests from this origin
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE', // Allowed methods
  credentials: true, // Allow credentials (cookies, authorization headers, etc.)
};
app.use(cors(corsOptions));

// Create MySQL connection
const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME
});

// Connect to MySQL
db.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    return;
  }
  console.log('Connected to MySQL');
});

//-------------------- Fetch laborer data API ------------------------
app.get('/laborers', (req, res) => {
  const { id, name, email } = req.query; // Get query parameters from request

  // Base SQL query
  let sql = 'SELECT * FROM laborers WHERE ';
  const params = [];

  // Dynamically build query based on provided parameters
  if (id) {
    sql += 'id = ?';
    params.push(id);
  } else if (name) {
    sql += 'name = ?';
    params.push(name);
  } else if (email) {
    sql += 'email = ?';
    params.push(email);
  } else {
    return res.status(400).json({ error: 'No valid query parameter provided (id, name, or email required)' });
  }

  // Execute the query
  db.query(sql, params, (err, result) => {
    if (err) {
      console.error('Error fetching user:', err);
      return res.status(500).json({ error: 'Failed to fetch user' });
    }

    if (result.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    } else {
      return res.json(result);
    }
  });
});

//-------------------- Register laborer API ------------------------
app.post('/register', (req, res) => {
  const { email, password, mobile } = req.body; // assuming you're sending JSON data in the request body

  // Step 1: Check if the email already exists
  const checkEmailSql = 'SELECT * FROM laborers WHERE email = ?';
  
  db.query(checkEmailSql, [email], (err, result) => {
    if (err) {
      console.error('Error checking email:', err);
      return res.status(500).json({ error: 'Failed to check email' });
    }

    // Step 2: If the email already exists, send a response
    if (result.length > 0) {
      return res.status(400).json({ message: 'Email already exists' });
    }

    // Step 3: Insert the new user without hashing the password
    const insertSql = 'INSERT INTO laborers (email, password, mobile) VALUES (?, ?, ?)';
    db.query(insertSql, [email, password, mobile], (err, result) => {
      if (err) {
        console.error('Error inserting user:', err);
        return res.status(500).json({ error: 'Failed to register user' });
      }

      // Step 4: Successfully registered user
      return res.status(201).json({ message: 'User registered successfully', userId: result.insertId });
    });
  });
});

//-------------------- Login laborer API ------------------------
app.post('/login', (req, res) => {
  const { email, name, mobile, password } = req.body; // Get all possible login fields from the request

  // Base SQL query
  let sql = 'SELECT * FROM laborers WHERE ';
  const params = [];

  // Dynamically build query based on the provided field (email, name, or mobile)
  if (email) {
    sql += 'email = ?';
    params.push(email);
  } else if (name) {
    sql += 'name = ?';
    params.push(name);
  } else if (mobile) {
    sql += 'mobile = ?';
    params.push(mobile);
  } else {
    return res.status(400).json({ error: 'Email, name, or mobile required for login' });
  }

  // Execute the query to find the user
  db.query(sql, params, (err, results) => {
    if (err) {
      console.error('Error fetching user:', err);
      return res.status(500).json({ error: 'Failed to fetch user' });
    }

    // Step 2: If no user found, send a response
    if (results.length === 0) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const user = results[0]; // Get the first (and should be only) user

    // Step 3: Compare provided password with the password in the database (no hashing)
    if (password === user.password) {
      // Passwords match, login successful
      return res.status(200).json({ message: 'Login successful', userId: user.id });
    } else {
      // Passwords do not match
      return res.status(401).json({ message: 'Invalid credentials' });
    }
  });
});

//-------------------- Start the server ------------------------
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});









//
const express = require('express');
const mysql = require('mysql2');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');

const app = express();
app.use(express.json());
app.use(cookieParser());

//const secretKey = 'your_secret_key'; // Use a secure key in production

// Create MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root', // Your MySQL username
  password: '', // Your MySQL password
  database: 'labour' // Your MySQL database
});

db.connect((err) => {
  if (err) {
    console.error('Database connection failed:', err.stack);
    return;
  }
  console.log('Connected to MySQL database.');
});

// Register a new user (no password hashing)
app.post('/register', (req, res) => {
  const { email, password, mobile } = req.body; // assuming you're sending JSON data in the request body

  // Step 1: Check if the email already exists
  const checkEmailSql = 'SELECT * FROM laborers WHERE email = ?';
  
  db.query(checkEmailSql, [email], (err, result) => {
    if (err) {
      console.error('Error checking email:', err);
      return res.status(500).json({ error: 'Failed to check email' });
    }

    // Step 2: If the email already exists, send a response
    if (result.length > 0) {
      return res.status(400).json({ message: 'Email already exists' });
    }

    // Step 3: Insert the new user without hashing the password
    const insertSql = 'INSERT INTO laborers (email, password, mobile) VALUES (?, ?, ?)';
    db.query(insertSql, [email, password, mobile], (err, result) => {
      if (err) {
        console.error('Error inserting user:', err);
        return res.status(500).json({ error: 'Failed to register user' });
      }

      // Step 4: Successfully registered user
      return res.status(201).json({ message: 'User registered successfully', userId: result.insertId });
    });
  });
});


// Login user and issue JWT token
app.post('/login', (req, res) => {
  const { email, password } = req.body;

  db.query('SELECT * FROM laborers WHERE email = ?', [email], (err, result) => {
    if (err || result.length === 0) return res.status(401).json({ message: 'User not found!' });

    const user = result[0];
    // Check if entered password matches the stored password
    if (password !== user.password) {
      return res.status(401).json({ message: 'Invalid credentials!' });
    }

    // Create JWT token
    const token = jwt.sign({ id: user.id, username: user.username }, secretKey, { expiresIn: '1h' });

    // Send token as cookie
    res.cookie('token', token, { httpOnly: true, secure: false, maxAge: 3600000 }); // 1 hour cookie expiration

    res.json({ message: 'Login successful', user: { id: user.id, username: user.username } });
  });
});

// Middleware to verify JWT
const verifyToken = (req, res, next) => {
  const token = req.cookies.token;

  if (!token) return res.status(403).json({ message: 'No token provided, authorization denied' });

  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) return res.status(401).json({ message: 'Invalid token!' });
    req.user = decoded; // User data from token
    next();
  });
};

// Protected route (accessible only after login)
app.get('/dashboard', verifyToken, (req, res) => {
  res.json({ message: `Welcome ${req.user.username}!`, user: req.user });
});

// Logout user and clear token cookie
app.post('/logout', (req, res) => {
  res.clearCookie('token');
  res.json({ message: 'Logout successful, session destroyed' });
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});








